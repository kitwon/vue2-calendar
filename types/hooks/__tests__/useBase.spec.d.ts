import { BaseProps } from '../../util/props';
export declare function getWrapper(props: Partial<BaseProps>): import("@vue/test-utils").VueWrapper<{
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: Partial<{
        start: string | number;
        weekdays: string | number[];
        hideHeader: boolean;
        shortWeekdays: boolean;
        weekdayFormat: import("../..").CalendarFormatter;
        dayFormat: import("../..").CalendarFormatter;
        type: string;
        locale: string;
        events: import("../..").CalendarEvent[];
        eventStart: string;
        eventEnd: string;
        eventTimed: string | import("../..").CalendarEventTimedFunction;
        eventCategory: string | import("../..").CalendarEventCategoryFunction;
        eventHeight: number;
        eventColor: string | import("../..").CalendarEventColorFunction;
        eventTextColor: string | import("../..").CalendarEventColorFunction;
        eventName: string | import("../..").CalendarEventNameFunction;
        eventOverlapThreshold: string | number;
        eventOverlapMode: import("../..").CalendarEventOverlapMode | "stack" | "column";
        eventMore: boolean;
        eventMoreText: string;
        eventRipple: null;
        eventMarginBottom: number;
        categories: string | unknown[];
        categoryHideDynamic: boolean;
        categoryShowAll: boolean;
        categoryForInvalid: string;
        categoryDays: string | number;
        maxDays: number;
        shortIntervals: boolean;
        intervalHeight: string | number;
        intervalWidth: string | number;
        intervalMinutes: string | number;
        firstInterval: string | number;
        intervalCount: string | number;
        intervalFormat: import("../..").CalendarFormatter;
        intervalStyle: (interval: import("../..").CalendarTimestamp) => object;
        showIntervalLabel: (interval: import("../..").CalendarTimestamp) => boolean;
        localeFirstDayOfYear: string | number;
        minWeeks: number;
        shortMonths: boolean;
        showMonthOnFirst: boolean;
        showWeek: boolean;
        monthFormat: import("../..").CalendarFormatter;
    }> & Pick<Readonly<{
        start: string | number;
        weekdays: string | number[];
        hideHeader: boolean;
        shortWeekdays: boolean;
        weekdayFormat: import("../..").CalendarFormatter;
        dayFormat: import("../..").CalendarFormatter;
        type: string;
        locale: string;
        events: import("../..").CalendarEvent[];
        eventStart: string;
        eventEnd: string;
        eventTimed: string | import("../..").CalendarEventTimedFunction;
        eventCategory: string | import("../..").CalendarEventCategoryFunction;
        eventHeight: number;
        eventColor: string | import("../..").CalendarEventColorFunction;
        eventTextColor: string | import("../..").CalendarEventColorFunction;
        eventName: string | import("../..").CalendarEventNameFunction;
        eventOverlapThreshold: string | number;
        eventOverlapMode: import("../..").CalendarEventOverlapMode | "stack" | "column";
        eventMore: boolean;
        eventMoreText: string;
        eventRipple: null;
        eventMarginBottom: number;
        categories: string | unknown[];
        categoryHideDynamic: boolean;
        categoryShowAll: boolean;
        categoryForInvalid: string;
        categoryDays: string | number;
        maxDays: number;
        shortIntervals: boolean;
        intervalHeight: string | number;
        intervalWidth: string | number;
        intervalMinutes: string | number;
        firstInterval: string | number;
        intervalCount: string | number;
        intervalFormat: import("../..").CalendarFormatter;
        intervalStyle: (interval: import("../..").CalendarTimestamp) => object;
        showIntervalLabel: (interval: import("../..").CalendarTimestamp) => boolean;
        localeFirstDayOfYear: string | number;
        minWeeks: number;
        shortMonths: boolean;
        showMonthOnFirst: boolean;
        showWeek: boolean;
        monthFormat: import("../..").CalendarFormatter;
    } & {
        end?: string | number | undefined;
        now?: string | undefined;
        modelValue?: string | number | Date | undefined;
        firstTime?: unknown;
    }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "end" | "now" | "modelValue" | "style" | "firstTime" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "class">;
    $attrs: Record<string, unknown>;
    $refs: Record<string, unknown>;
    $slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<Readonly<{
        start: string | number;
        weekdays: string | number[];
        hideHeader: boolean;
        shortWeekdays: boolean;
        weekdayFormat: import("../..").CalendarFormatter;
        dayFormat: import("../..").CalendarFormatter;
        type: string;
        locale: string;
        events: import("../..").CalendarEvent[];
        eventStart: string;
        eventEnd: string;
        eventTimed: string | import("../..").CalendarEventTimedFunction;
        eventCategory: string | import("../..").CalendarEventCategoryFunction;
        eventHeight: number;
        eventColor: string | import("../..").CalendarEventColorFunction;
        eventTextColor: string | import("../..").CalendarEventColorFunction;
        eventName: string | import("../..").CalendarEventNameFunction;
        eventOverlapThreshold: string | number;
        eventOverlapMode: import("../..").CalendarEventOverlapMode | "stack" | "column";
        eventMore: boolean;
        eventMoreText: string;
        eventRipple: null;
        eventMarginBottom: number;
        categories: string | unknown[];
        categoryHideDynamic: boolean;
        categoryShowAll: boolean;
        categoryForInvalid: string;
        categoryDays: string | number;
        maxDays: number;
        shortIntervals: boolean;
        intervalHeight: string | number;
        intervalWidth: string | number;
        intervalMinutes: string | number;
        firstInterval: string | number;
        intervalCount: string | number;
        intervalFormat: import("../..").CalendarFormatter;
        intervalStyle: (interval: import("../..").CalendarTimestamp) => object;
        showIntervalLabel: (interval: import("../..").CalendarTimestamp) => boolean;
        localeFirstDayOfYear: string | number;
        minWeeks: number;
        shortMonths: boolean;
        showMonthOnFirst: boolean;
        showWeek: boolean;
        monthFormat: import("../..").CalendarFormatter;
    } & {
        end?: string | number | undefined;
        now?: string | undefined;
        modelValue?: string | number | Date | undefined;
        firstTime?: unknown;
    }>, {
        renderProps: import("vue").ComputedRef<{
            component: any;
            classes: string;
            props: {
                start: import("../..").CalendarTimestamp;
                end: import("../..").CalendarTimestamp;
                maxDays: number;
                weekdays: number[];
            };
        }>;
        parsedValue: import("vue").ComputedRef<import("../..").CalendarTimestamp>;
        noEvents: import("vue").ComputedRef<boolean>;
        move: (amount?: number) => void;
        next: (amount?: number) => void;
        prev: (amount?: number) => void;
        getScopeSlots: () => {
            day?: import("../useEvents").DayBodyScope | import("../useEvents").DayScope | undefined;
            "day-body"?: import("../useEvents").DayBodyScope | import("../useEvents").DayScope | undefined;
            "day-header"?: import("../useEvents").DayBodyScope | import("../useEvents").DayScope | undefined;
            event?: import("../useEvents").DayBodyScope | import("../useEvents").DayScope | undefined;
        };
        timeToY: (time: import("../../util/timestamp").VTime, clamp?: boolean) => number | false;
        scrollToTime: (time: import("../../util/timestamp").VTime) => any;
        calendarRef: any;
        updateTimes: () => void;
        times: {
            now: {
                date: string;
                time: string;
                year: number;
                month: number;
                day: number;
                weekday: number;
                hour: number;
                minute: number;
                hasDay: boolean;
                hasTime: boolean;
                past: boolean;
                present: boolean;
                future: boolean;
            };
            today: {
                date: string;
                time: string;
                year: number;
                month: number;
                day: number;
                weekday: number;
                hour: number;
                minute: number;
                hasDay: boolean;
                hasTime: boolean;
                past: boolean;
                present: boolean;
                future: boolean;
            };
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
        start: string | number;
        weekdays: string | number[];
        hideHeader: boolean;
        shortWeekdays: boolean;
        weekdayFormat: import("../..").CalendarFormatter;
        dayFormat: import("../..").CalendarFormatter;
        type: string;
        locale: string;
        events: import("../..").CalendarEvent[];
        eventStart: string;
        eventEnd: string;
        eventTimed: string | import("../..").CalendarEventTimedFunction;
        eventCategory: string | import("../..").CalendarEventCategoryFunction;
        eventHeight: number;
        eventColor: string | import("../..").CalendarEventColorFunction;
        eventTextColor: string | import("../..").CalendarEventColorFunction;
        eventName: string | import("../..").CalendarEventNameFunction;
        eventOverlapThreshold: string | number;
        eventOverlapMode: import("../..").CalendarEventOverlapMode | "stack" | "column";
        eventMore: boolean;
        eventMoreText: string;
        eventRipple: null;
        eventMarginBottom: number;
        categories: string | unknown[];
        categoryHideDynamic: boolean;
        categoryShowAll: boolean;
        categoryForInvalid: string;
        categoryDays: string | number;
        maxDays: number;
        shortIntervals: boolean;
        intervalHeight: string | number;
        intervalWidth: string | number;
        intervalMinutes: string | number;
        firstInterval: string | number;
        intervalCount: string | number;
        intervalFormat: import("../..").CalendarFormatter;
        intervalStyle: (interval: import("../..").CalendarTimestamp) => object;
        showIntervalLabel: (interval: import("../..").CalendarTimestamp) => boolean;
        localeFirstDayOfYear: string | number;
        minWeeks: number;
        shortMonths: boolean;
        showMonthOnFirst: boolean;
        showWeek: boolean;
        monthFormat: import("../..").CalendarFormatter;
    }>;
    $forceUpdate: import("vue").ReactiveEffect<any>;
    $nextTick: typeof import("vue").nextTick;
    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & Readonly<{
    start: string | number;
    weekdays: string | number[];
    hideHeader: boolean;
    shortWeekdays: boolean;
    weekdayFormat: import("../..").CalendarFormatter;
    dayFormat: import("../..").CalendarFormatter;
    type: string;
    locale: string;
    events: import("../..").CalendarEvent[];
    eventStart: string;
    eventEnd: string;
    eventTimed: string | import("../..").CalendarEventTimedFunction;
    eventCategory: string | import("../..").CalendarEventCategoryFunction;
    eventHeight: number;
    eventColor: string | import("../..").CalendarEventColorFunction;
    eventTextColor: string | import("../..").CalendarEventColorFunction;
    eventName: string | import("../..").CalendarEventNameFunction;
    eventOverlapThreshold: string | number;
    eventOverlapMode: import("../..").CalendarEventOverlapMode | "stack" | "column";
    eventMore: boolean;
    eventMoreText: string;
    eventRipple: null;
    eventMarginBottom: number;
    categories: string | unknown[];
    categoryHideDynamic: boolean;
    categoryShowAll: boolean;
    categoryForInvalid: string;
    categoryDays: string | number;
    maxDays: number;
    shortIntervals: boolean;
    intervalHeight: string | number;
    intervalWidth: string | number;
    intervalMinutes: string | number;
    firstInterval: string | number;
    intervalCount: string | number;
    intervalFormat: import("../..").CalendarFormatter;
    intervalStyle: (interval: import("../..").CalendarTimestamp) => object;
    showIntervalLabel: (interval: import("../..").CalendarTimestamp) => boolean;
    localeFirstDayOfYear: string | number;
    minWeeks: number;
    shortMonths: boolean;
    showMonthOnFirst: boolean;
    showWeek: boolean;
    monthFormat: import("../..").CalendarFormatter;
} & {
    end?: string | number | undefined;
    now?: string | undefined;
    modelValue?: string | number | Date | undefined;
    firstTime?: unknown;
}> & import("vue").ShallowUnwrapRef<{
    renderProps: import("vue").ComputedRef<{
        component: any;
        classes: string;
        props: {
            start: import("../..").CalendarTimestamp;
            end: import("../..").CalendarTimestamp;
            maxDays: number;
            weekdays: number[];
        };
    }>;
    parsedValue: import("vue").ComputedRef<import("../..").CalendarTimestamp>;
    noEvents: import("vue").ComputedRef<boolean>;
    move: (amount?: number) => void;
    next: (amount?: number) => void;
    prev: (amount?: number) => void;
    getScopeSlots: () => {
        day?: import("../useEvents").DayBodyScope | import("../useEvents").DayScope | undefined;
        "day-body"?: import("../useEvents").DayBodyScope | import("../useEvents").DayScope | undefined;
        "day-header"?: import("../useEvents").DayBodyScope | import("../useEvents").DayScope | undefined;
        event?: import("../useEvents").DayBodyScope | import("../useEvents").DayScope | undefined;
    };
    timeToY: (time: import("../../util/timestamp").VTime, clamp?: boolean) => number | false;
    scrollToTime: (time: import("../../util/timestamp").VTime) => any;
    calendarRef: any;
    updateTimes: () => void;
    times: {
        now: {
            date: string;
            time: string;
            year: number;
            month: number;
            day: number;
            weekday: number;
            hour: number;
            minute: number;
            hasDay: boolean;
            hasTime: boolean;
            past: boolean;
            present: boolean;
            future: boolean;
        };
        today: {
            date: string;
            time: string;
            year: number;
            month: number;
            day: number;
            weekday: number;
            hour: number;
            minute: number;
            hasDay: boolean;
            hasTime: boolean;
            past: boolean;
            present: boolean;
            future: boolean;
        };
    };
}> & {} & import("vue").ComponentCustomProperties>;
export declare function getProps(props: Partial<BaseProps>): Partial<{
    start: string | number;
    weekdays: string | number[];
    hideHeader: boolean;
    shortWeekdays: boolean;
    weekdayFormat: import("../..").CalendarFormatter;
    dayFormat: import("../..").CalendarFormatter;
    type: string;
    locale: string;
    events: import("../..").CalendarEvent[];
    eventStart: string;
    eventEnd: string;
    eventTimed: string | import("../..").CalendarEventTimedFunction;
    eventCategory: string | import("../..").CalendarEventCategoryFunction;
    eventHeight: number;
    eventColor: string | import("../..").CalendarEventColorFunction;
    eventTextColor: string | import("../..").CalendarEventColorFunction;
    eventName: string | import("../..").CalendarEventNameFunction;
    eventOverlapThreshold: string | number;
    eventOverlapMode: import("../..").CalendarEventOverlapMode | "stack" | "column";
    eventMore: boolean;
    eventMoreText: string;
    eventRipple: null;
    eventMarginBottom: number;
    categories: string | unknown[];
    categoryHideDynamic: boolean;
    categoryShowAll: boolean;
    categoryForInvalid: string;
    categoryDays: string | number;
    maxDays: number;
    shortIntervals: boolean;
    intervalHeight: string | number;
    intervalWidth: string | number;
    intervalMinutes: string | number;
    firstInterval: string | number;
    intervalCount: string | number;
    intervalFormat: import("../..").CalendarFormatter;
    intervalStyle: (interval: import("../..").CalendarTimestamp) => object;
    showIntervalLabel: (interval: import("../..").CalendarTimestamp) => boolean;
    localeFirstDayOfYear: string | number;
    minWeeks: number;
    shortMonths: boolean;
    showMonthOnFirst: boolean;
    showWeek: boolean;
    monthFormat: import("../..").CalendarFormatter;
}> & Pick<Readonly<{
    start: string | number;
    weekdays: string | number[];
    hideHeader: boolean;
    shortWeekdays: boolean;
    weekdayFormat: import("../..").CalendarFormatter;
    dayFormat: import("../..").CalendarFormatter;
    type: string;
    locale: string;
    events: import("../..").CalendarEvent[];
    eventStart: string;
    eventEnd: string;
    eventTimed: string | import("../..").CalendarEventTimedFunction;
    eventCategory: string | import("../..").CalendarEventCategoryFunction;
    eventHeight: number;
    eventColor: string | import("../..").CalendarEventColorFunction;
    eventTextColor: string | import("../..").CalendarEventColorFunction;
    eventName: string | import("../..").CalendarEventNameFunction;
    eventOverlapThreshold: string | number;
    eventOverlapMode: import("../..").CalendarEventOverlapMode | "stack" | "column";
    eventMore: boolean;
    eventMoreText: string;
    eventRipple: null;
    eventMarginBottom: number;
    categories: string | unknown[];
    categoryHideDynamic: boolean;
    categoryShowAll: boolean;
    categoryForInvalid: string;
    categoryDays: string | number;
    maxDays: number;
    shortIntervals: boolean;
    intervalHeight: string | number;
    intervalWidth: string | number;
    intervalMinutes: string | number;
    firstInterval: string | number;
    intervalCount: string | number;
    intervalFormat: import("../..").CalendarFormatter;
    intervalStyle: (interval: import("../..").CalendarTimestamp) => object;
    showIntervalLabel: (interval: import("../..").CalendarTimestamp) => boolean;
    localeFirstDayOfYear: string | number;
    minWeeks: number;
    shortMonths: boolean;
    showMonthOnFirst: boolean;
    showWeek: boolean;
    monthFormat: import("../..").CalendarFormatter;
} & {
    end?: string | number | undefined;
    now?: string | undefined;
    modelValue?: string | number | Date | undefined;
    firstTime?: unknown;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "end" | "now" | "modelValue" | "style" | "firstTime" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "class">;
